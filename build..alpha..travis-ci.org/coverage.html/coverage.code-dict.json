{"/home/travis/build/npmtest/node-npmtest-karma-mocha/test.js":"/* istanbul instrument in package npmtest_karma_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/lib.npmtest_karma_mocha.js":"/* istanbul instrument in package npmtest_karma_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_mocha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_mocha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-mocha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_mocha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_mocha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_karma_mocha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_mocha.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_karma_mocha.__dirname +\n                    '/lib.npmtest_karma_mocha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/node_modules/karma-mocha/lib/index.js":"var path = require('path')\nvar extend = require('util')._extend\nvar minimist = require('minimist')\n\nvar createPattern = function (path) {\n  return {pattern: path, included: true, served: true, watched: false}\n}\n\nvar initMocha = function (files, config) {\n  var mochaPath = path.dirname(require.resolve('mocha'))\n  files.unshift(createPattern(path.join(__dirname, 'adapter.js')))\n\n  config = config || {}\n  config.client = config.client || {}\n  var mochaConfig = config.client.mocha = getMochaOpts(config.client.mocha || {})\n\n  if (mochaConfig.require && mochaConfig.require.map) {\n    mochaConfig.require.map(function (requirePath) {\n      return files.unshift(createPattern(requirePath))\n    })\n  }\n\n  files.unshift(createPattern(path.join(mochaPath, 'mocha.js')))\n\n  if (mochaConfig.reporter) {\n    files.unshift(createPattern(path.join(mochaPath, 'mocha.css')))\n  }\n}\n\ninitMocha.$inject = ['config.files', 'config']\n\nmodule.exports = {\n  'framework:mocha': ['factory', initMocha]\n}\n\nfunction getMochaOpts (mochaConfig) {\n  var optsPath = typeof mochaConfig.opts === 'string' ? mochaConfig.opts : 'test/mocha.opts'\n\n  if (!mochaConfig.opts) {\n    return mochaConfig\n  }\n\n  delete mochaConfig.opts\n\n  var fs = require('fs')\n  if (!fs.existsSync(optsPath)) {\n    return mochaConfig\n  }\n\n  return extend(normalizeOpts(minimist(fs.readFileSync(optsPath, 'utf8')\n    .replace(/\\\\\\s/g, '%20')\n    .split(/\\s/)\n    .filter(Boolean)\n    .map(function (value) {\n      return value.replace(/%20/g, ' ')\n    }))), mochaConfig)\n\n  function normalizeOpts (opts) {\n    opts = [\n      'require',\n\n      'ui',\n      'reporter',\n      'globals',\n      'grep',\n      'timeout',\n      'slow',\n      'bail',\n      'ignoreLeaks'\n    ].reduce(function (result, optName) {\n      if (opts.hasOwnProperty(optName)) {\n        result[optName] = opts[optName]\n      }\n\n      return result\n    }, {})\n\n    opts.require = [].concat(opts.require || [])\n\n    return opts\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/node_modules/karma-mocha/gruntfile.js":"module.exports = function (grunt) {\n  grunt.initConfig({\n    pkgFile: 'package.json',\n    files: {\n      adapter: [\n        'src/adapter.js'\n      ]\n    },\n    build: {\n      adapter: '<%= files.adapter %>'\n    },\n    eslint: {\n      target: [\n        '<%= files.adapter %>',\n        '*.js',\n        'lib/index.js',\n        'tasks/*.js',\n        'test/**/*.js'\n      ]\n    },\n    karma: {\n      adapter: {\n        configFile: 'karma.conf.js',\n        autoWatch: false,\n        singleRun: true,\n        reporters: ['dots']\n      }\n    },\n    'npm-publish': {\n      options: {\n        requires: ['build']\n      }\n    },\n    'npm-contributors': {\n      options: {\n        commitMessage: 'chore: update contributors'\n      }\n    },\n    conventionalChangelog: {\n      release: {\n        options: {\n          changelogOpts: {\n            preset: 'angular'\n          }\n        },\n        src: 'CHANGELOG.md'\n      }\n    },\n    bump: {\n      options: {\n        commitFiles: [\n          'package.json',\n          'CHANGELOG.md'\n        ],\n        commitMessage: 'chore: release v%VERSION%',\n        pushTo: 'upstream'\n      }\n    }\n  })\n\n  require('load-grunt-tasks')(grunt)\n  grunt.loadTasks('tasks')\n  grunt.registerTask('default', ['build', 'eslint', 'test'])\n  grunt.registerTask('test', ['karma'])\n\n  grunt.registerTask('release', 'Build, bump and publish to NPM.', function (type) {\n    grunt.task.run([\n      'npm-contributors',\n      'bump:' + (type || 'patch') + ':bump-only',\n      'build',\n      'conventionalChangelog',\n      'bump-commit',\n      'npm-publish'\n    ])\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/node_modules/karma-mocha/lib/adapter.js":";(function (window) {\n\n// backwards compatible version of (Array|String).prototype.includes\nvar includes = function (collection, element, startIndex) {\n  if (!collection || !collection.length) {\n    return false\n  }\n\n  // strings support indexOf already\n  if (typeof collection === 'string') {\n    return collection.indexOf(element, startIndex) !== -1\n  }\n\n  if (Array.prototype.indexOf) {\n    return collection.indexOf(element, startIndex) !== -1\n  }\n\n  for (var i = startIndex || 0, len = collection.length; i < len; i++) {\n    if (collection[i] === element) {\n      return true\n    }\n  }\n}\n\n// Date.now polyfill for IE <= 8\nif (!Date.now) {\n  Date.now = function () {\n    return +new Date()\n  }\n}\n\nvar formatError = function (error) {\n  var stack = error.stack\n  var message = error.message\n\n  if (stack) {\n    if (message && !includes(stack, message)) {\n      stack = message + '\\n' + stack\n    }\n\n    // remove mocha stack entries\n    return stack.replace(/\\n.+\\/mocha\\/mocha\\.js\\?\\w*:[\\d:]+\\)?(?=(\\n|$))/g, '')\n  }\n\n  return message\n}\n\nvar processAssertionError = function (error_) {\n  var error\n\n  if (window.Mocha && error_.hasOwnProperty('showDiff')) {\n    error = {\n      name: error_.name,\n      message: error_.message,\n      showDiff: error_.showDiff\n    }\n\n    if (error.showDiff) {\n      error.actual = window.Mocha.utils.stringify(error_.actual)\n      error.expected = window.Mocha.utils.stringify(error_.expected)\n    }\n  }\n\n  return error\n}\n\n// non-compliant version of Array::reduce.call (requires memo argument)\nvar arrayReduce = function (array, reducer, memo) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    memo = reducer(memo, array[i])\n  }\n  return memo\n}\n\nvar createMochaReporterNode = function () {\n  var mochaRunnerNode = document.createElement('div')\n  mochaRunnerNode.setAttribute('id', 'mocha')\n  document.body.appendChild(mochaRunnerNode)\n}\n\nvar haveMochaConfig = function (karma) {\n  return karma.config && karma.config.mocha\n}\n\nvar createMochaReporterConstructor = function (tc, pathname) {\n  var isDebugPage = /debug.html$/.test(pathname)\n\n  // Set custom reporter on debug page\n  if (isDebugPage && haveMochaConfig(tc) && tc.config.mocha.reporter) {\n    createMochaReporterNode()\n    return tc.config.mocha.reporter\n  }\n\n  // TODO(vojta): error formatting\n  return function (runner) {\n    // runner events\n    // - start\n    // - end\n    // - suite\n    // - suite end\n    // - test\n    // - test end\n    // - pass\n    // - fail\n    // - pending\n\n    runner.on('start', function () {\n      tc.info({total: runner.total})\n    })\n\n    runner.on('end', function () {\n      tc.complete({\n        coverage: window.__coverage__\n      })\n    })\n\n    runner.on('test', function (test) {\n      test.$startTime = Date.now()\n      test.$errors = []\n      test.$assertionErrors = []\n    })\n\n    runner.on('pending', function (test) {\n      test.pending = true\n    })\n\n    runner.on('fail', function (test, error) {\n      var simpleError = formatError(error)\n      var assertionError = processAssertionError(error)\n\n      if (test.type === 'hook') {\n        test.$errors = isDebugPage ? [error] : [simpleError]\n        test.$assertionErrors = assertionError ? [assertionError] : []\n        runner.emit('test end', test)\n      } else {\n        test.$errors.push(isDebugPage ? error : simpleError)\n        if (assertionError) test.$assertionErrors.push(assertionError)\n      }\n    })\n\n    runner.on('test end', function (test) {\n      var skipped = test.pending === true\n\n      var result = {\n        id: '',\n        description: test.title,\n        suite: [],\n        success: test.state === 'passed',\n        skipped: skipped,\n        time: skipped ? 0 : test.duration,\n        log: test.$errors || [],\n        assertionErrors: test.$assertionErrors || [],\n        startTime: test.$startTime,\n        endTime: Date.now()\n      }\n\n      var pointer = test.parent\n      while (!pointer.root) {\n        result.suite.unshift(pointer.title)\n        pointer = pointer.parent\n      }\n\n      if (haveMochaConfig(tc) && tc.config.mocha.expose && tc.config.mocha.expose.forEach) {\n        result.mocha = {}\n        tc.config.mocha.expose.forEach(function (prop) {\n          if (test.hasOwnProperty(prop)) {\n            result.mocha[prop] = test[prop]\n          }\n        })\n      }\n\n      tc.result(result)\n    })\n  }\n}\n/* eslint-disable no-unused-vars */\nvar createMochaStartFn = function (mocha) {\n  /* eslint-enable no-unused-vars */\n  return function (config) {\n    var clientArguments\n    config = config || {}\n    clientArguments = config.args\n\n    if (clientArguments) {\n      if (Object.prototype.toString.call(clientArguments) === '[object Array]') {\n        arrayReduce(clientArguments, function (isGrepArg, arg) {\n          if (isGrepArg) {\n            mocha.grep(new RegExp(arg))\n          } else if (arg === '--grep') {\n            return true\n          } else {\n            var match = /--grep=(.*)/.exec(arg)\n\n            if (match) {\n              mocha.grep(new RegExp(match[1]))\n            }\n          }\n          return false\n        }, false)\n      }\n\n      /**\n       * TODO(maksimrv): remove when karma-grunt plugin will pass\n       * clientArguments how Array\n       */\n      if (clientArguments.grep) {\n        mocha.grep(clientArguments.grep)\n      }\n    }\n\n    mocha.run()\n  }\n}\n\n// Default configuration\nvar mochaConfig = {\n  reporter: createMochaReporterConstructor(window.__karma__, window.location.pathname),\n  ui: 'bdd',\n  globals: ['__cov*']\n}\n\n// Pass options from client.mocha to mocha\n/* eslint-disable no-unused-vars */\nvar createConfigObject = function (karma) {\n  /* eslint-enable no-unused-vars */\n\n  if (!karma.config || !karma.config.mocha) {\n    return mochaConfig\n  }\n\n  // Copy all properties to mochaConfig\n  for (var key in karma.config.mocha) {\n    // except for reporter, require, or expose\n    if (includes(['reporter', 'require', 'expose'], key)) {\n      continue\n    }\n\n    // and merge the globals if they exist.\n    if (key === 'globals') {\n      mochaConfig.globals = mochaConfig.globals.concat(karma.config.mocha[key])\n      continue\n    }\n\n    mochaConfig[key] = karma.config.mocha[key]\n  }\n  return mochaConfig\n}\n\n  window.__karma__.start = createMochaStartFn(window.mocha)\n  window.mocha.setup(createConfigObject(window.__karma__))\n})(window)\n","/home/travis/build/npmtest/node-npmtest-karma-mocha/node_modules/karma-mocha/wallaby.js":"module.exports = function () {\n  return {\n    files: [\n      'lib/**/*@(.js)'\n    ],\n\n    tests: [\n      './test/lib/**/*.spec@(.js)'\n    ],\n\n    env: {\n      type: 'node'\n    },\n\n    testFramework: 'mocha'\n  }\n}\n"}